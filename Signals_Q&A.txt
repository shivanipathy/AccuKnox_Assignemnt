Topic: Django Signals
Question 1: By default, are django signals executed synchronously or asynchronously?
Answer: Django signals are executed synchronously by default.

Code Snippet:
import time
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def slow_signal(sender, instance, **kwargs):
    print("Signal received. Pausing for 5 seconds.")
    time.sleep(5)  # Simulating a slow operation
    print("Signal processing complete.")

# Creating a new user
User.objects.create(username="testuser")

print("User creation complete.")


Output:
Signal received. Pausing for 5 seconds.
Signal processing complete.
User creation complete.




Question 2: Do django signals run in the same thread as the caller?
Answer: Yes, Django signals run in the same thread as the caller by default.

Code Snippet:
import threading
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def check_thread(sender, instance, **kwargs):
    print(f"Signal executed in thread: {threading.get_ident()}")

# Creating a new user
print(f"Caller executed in thread: {threading.get_ident()}")
User.objects.create(username="testuser")


Output:
Caller executed in thread: 123145307639808
Signal executed in thread: 123145307639808


Question 3: By default, do Django signals run in the same database transaction as the caller?
Answer: Yes, Django signals by default run in the same database transaction as the caller.

Code Snippet:
from django.db import transaction
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def signal_in_transaction(sender, instance, **kwargs):
    print(f"Signal executed for user: {instance.username}")

try:
    with transaction.atomic():
        user = User.objects.create(username="transaction_user")
        print("User created inside transaction.")
        raise Exception("Rolling back transaction.")
except Exception as e:
    print(e)

# Check if the user and the signal were actually saved/executed
print(User.objects.filter(username="transaction_user").exists())


Output:
User created inside transaction.
Rolling back transaction.
False


